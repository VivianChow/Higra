language: cpp
dist: bionic
branches:
  only:
  - master
  - /^\d+\.\d+\.\d+(-\S*)?$/
matrix:
  include:
  - os: linux
    if: tag IS present
    services:
      - docker
    env: BUILD_WHEEL=1 CIBW_BUILD="cp37-*" CIBW_SKIP=*-manylinux_i686
  - os: linux
    if: tag IS present
    services:
      - docker
    env: BUILD_WHEEL=1 CIBW_BUILD="cp38-*" CIBW_SKIP=*-manylinux_i686
  - os: linux
    if: tag IS present
    services:
      - docker
    env: BUILD_WHEEL=1 CIBW_BUILD="cp39-*" CIBW_SKIP=*-manylinux_i686
  - os: linux
    services:
    - docker
    env: BUILD_WHEEL=1 CIBW_BUILD="cp310-*" CIBW_SKIP=*-manylinux_i686
  - os: osx
    if: tag IS present
    env: BUILD_WHEEL=1 CIBW_BUILD="cp37-*"
  - os: osx
    if: tag IS present
    env: BUILD_WHEEL=1 CIBW_BUILD="cp38-*"
  - os: osx
    if: tag IS present
    env: BUILD_WHEEL=1 CIBW_BUILD="cp39-*"
  - os: osx
    env: BUILD_WHEEL=1 CIBW_BUILD="cp310-*"
  - os: linux
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
    env: COMPILER=gcc GCC=7 HG_USE_TBB=On
  - os: linux
    dist: bionic
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
        - lcov
    env: COMPILER=gcc GCC=7 COVERAGE=1 HG_USE_TBB=On
  - os: linux
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - g++-7
        - clang-7
    env: COMPILER=clang CLANG=7 HG_USE_TBB=Off
  - os: osx
    osx_image: xcode11.6
    compiler: clang
    env: HG_USE_TBB=On
env:
  global:
  - MINCONDA_VERSION="latest"
  - MINCONDA_LINUX="Linux-x86_64"
  - MINCONDA_OSX="MacOSX-x86_64"
  - CIBW_BUILD_VERBOSITY="1"
  - CIBW_BEFORE_BUILD_LINUX="source tools/cibuildwheel_manylinux.sh"
  - CIBW_BEFORE_BUILD_MACOS="source tools/cibuildwheel_osx.sh"
  - CIBW_ENVIRONMENT_LINUX='HG_USE_TBB=1 MFLAG="-m64"  CXXFLAGS="${MFLAG}" TBB_INCLUDE_DIR="/tbb/include/" TBB_LIBRARY="/tbb/lib/"'
  - CIBW_ENVIRONMENT_MACOS='HG_USE_TBB=1 TBB_INCLUDE_DIR="/Users/travis/tbb/include/" TBB_LIBRARY="/Users/travis/tbb/lib/"'
  - CIBW_TEST_COMMAND="pip install scikit-learn==1.0.1 && python -c \"import unittest;result=unittest.TextTestRunner(verbosity=2).run(unittest.defaultTestLoader.discover('{project}/test/python/'));exit(0 if result.wasSuccessful() else 1)\""
before_install:
- |
  # Configure build variables
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    if [[ "$COMPILER" == "gcc" ]]; then
      export CXX=g++-$GCC CC=gcc-$GCC;
    fi
    if [[ "$COMPILER" == "clang" ]]; then
      export CXX=clang++-$CLANG CC=clang-$CLANG;
    fi
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    export CXX=clang++ CC=clang;
  fi
install:
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    MINCONDA_OS=$MINCONDA_LINUX;
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    MINCONDA_OS=$MINCONDA_OSX;
  fi
- wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
- bash miniconda.sh -b -p $HOME/miniconda
- export PATH="$HOME/miniconda/bin:$PATH"
- hash -r
- conda config --set always_yes yes --set changeps1 no
#- conda update -q conda
- if [ -n "$COVERAGE" ]; then
  conda install numpy tbb-devel scipy scikit-learn -c conda-forge &&
    mkdir build &&
    cd build &&
  cmake -DCMAKE_BUILD_TYPE=Coverage -DPYTHON_EXECUTABLE:FILEPATH=$HOME/miniconda/bin/python -DTBB_INCLUDE_DIR=$HOME/miniconda/include -DTBB_LIBRARY=$HOME/miniconda/lib ..  &&
    make -j2 test_exe;
  elif [ -z "$BUILD_WHEEL" ]; then
  conda install tbb-devel==2019.9 scikit-learn==1.0.1 -c conda-forge &&
    mkdir build &&
    cd build &&
  cmake -DCMAKE_BUILD_TYPE=Debug -DPYTHON_EXECUTABLE:FILEPATH=$HOME/miniconda/bin/python -DHG_USE_TBB=$HG_USE_TBB -DTBB_INCLUDE_DIR=$HOME/miniconda/include -DTBB_LIBRARY=$HOME/miniconda/lib ..  &&
    make -j2 higram test_exe;
  else
  pip install cibuildwheel==2.2.2;
  fi
script:
  - |
    if [ -n "$COVERAGE" ]; then
      ctest -R Test_cpp &&
      cd ${TRAVIS_BUILD_DIR} &&
      lcov --directory . --no-external --capture --output-file coverage.info && # capture coverage info
      lcov --remove coverage.info '*lib/include*' --output-file coverage.info && # filter out system
      lcov --list coverage.info && #debug info
      bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports";
    elif [ -z "$BUILD_WHEEL" ]; then
      ctest -V;
    else
      cibuildwheel --output-dir wheelhouse;
    fi
  - if [ -n "$BUILD_WHEEL" -a -n "$TRAVIS_TAG" ]; then
      python -m pip install twine &&
      python -m twine upload wheelhouse/*.whl || true;
    fi

